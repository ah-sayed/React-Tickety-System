#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('backend:server');
const http = require('http');
const os = require('os');
const cluster = require('cluster');

if (cluster.isMaster) {
    const n_cpus = os.cpus().length;
    console.log(`Forking ${n_cpus} CPUs`);
    for (let i = 0; i < n_cpus; i++) {
        cluster.fork();
    }
} else {

    const app = require('../app');
    const { spawn } = require('child_process');
    /**
     * Get port from environment and store in Express.
     */

    const port = normalizePort(process.env.PORT || '5000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    // server.on()
    server.on('listening', onListening);
    server.on('error', onError);

    /**
     * Normalize a port into a number, string, or false.
     */
    
    function normalizePort(val) {
        const port = parseInt(val, 10);
    
        if (isNaN(port)) {
            // named pipe
            return val;
        }
    
        if (port >= 0) {
            // port number
            return port;
        }
    
        return false;
    }
    
    /**
     * Event listener for HTTP server "error" event.
     */
    
    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }
    
        const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    
        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    
    /**
     * Event listener for HTTP server "listening" event.
     */
    
    function onListening() {
        const addr = server.address();
        const bind =
            typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
        console.log(`Server: process ${process.pid} is listening on port`, app.get('port'));
        debug('Listening on ' + bind);
    }
}
